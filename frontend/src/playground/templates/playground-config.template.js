/**
 * Playground Configuration Template Generator
 * 
 * Generates playground configuration for component testing and documentation
 */

export function generatePlaygroundConfigTemplate(config) {
  const {
    componentName,
    className,
    category,
    description,
    properties = [],
    examples = []
  } = config;

  const argTypes = properties.reduce((acc, prop) => {
    acc[prop.name] = {
      control: getControlType(prop.type, prop.name),
      defaultValue: prop.defaultValue || getDefaultForType(prop.type),
      description: prop.description
    };

    // Add options for known property patterns
    if (prop.name === 'variant') {
      acc[prop.name].options = ['default', 'primary', 'secondary', 'success', 'warning', 'error'];
    } else if (prop.name === 'size') {
      acc[prop.name].options = ['sm', 'md', 'lg'];
    }

    return acc;
  }, {});

  const defaultExamples = examples.length > 0 ? examples : [
    {
      name: 'Default',
      description: 'Default component state',
      variants: [
        { props: {}, label: 'Default' }
      ]
    }
  ];

  const additionalExamples = category === 'atoms' 
    ? generateAtomExamples(properties)
    : category === 'molecules' 
    ? generateMoleculeExamples(properties)
    : generateOrganismExamples(properties);

  return `/**
 * Playground configuration for ${className}
 * Auto-generated by Component Generator
 */

export default {
  component: '${componentName}',
  title: '${className}',
  description: '${description}',
  category: '${category}',
  examples: [
    ${defaultExamples.concat(additionalExamples).map(example => `{
      name: '${example.name}',
      description: '${example.description}',
      variants: [
        ${example.variants.map(variant => `{ 
          props: ${JSON.stringify(variant.props, null, 10)}, 
          label: '${variant.label}' 
        }`).join(',\n        ')}
      ]
    }`).join(',\n    ')}
  ],
  argTypes: ${JSON.stringify(argTypes, null, 4)}
};`;
}

function getControlType(type, propName) {
  // Special cases for common property names
  if (propName === 'variant' || propName === 'type' || propName === 'size') {
    return 'select';
  }

  switch (type) {
    case 'Boolean': return 'boolean';
    case 'Number': return 'number';
    case 'Array': return 'text'; // JSON input
    case 'Object': return 'text'; // JSON input
    case 'String':
    default: return 'text';
  }
}

function getDefaultForType(type) {
  switch (type) {
    case 'Boolean': return false;
    case 'Number': return 0;
    case 'Array': return [];
    case 'Object': return {};
    case 'String':
    default: return '';
  }
}

function generateAtomExamples(properties) {
  const hasVariant = properties.some(p => p.name === 'variant');
  const hasSize = properties.some(p => p.name === 'size');
  const hasDisabled = properties.some(p => p.name === 'disabled');

  const examples = [];

  if (hasVariant) {
    examples.push({
      name: 'Variants',
      description: 'Different component variants',
      variants: [
        { props: { variant: 'primary' }, label: 'Primary' },
        { props: { variant: 'secondary' }, label: 'Secondary' },
        { props: { variant: 'success' }, label: 'Success' },
        { props: { variant: 'warning' }, label: 'Warning' },
        { props: { variant: 'error' }, label: 'Error' }
      ]
    });
  }

  if (hasSize) {
    examples.push({
      name: 'Sizes',
      description: 'Different component sizes',
      variants: [
        { props: { size: 'sm' }, label: 'Small' },
        { props: { size: 'md' }, label: 'Medium' },
        { props: { size: 'lg' }, label: 'Large' }
      ]
    });
  }

  if (hasDisabled) {
    examples.push({
      name: 'States',
      description: 'Different component states',
      variants: [
        { props: {}, label: 'Normal' },
        { props: { disabled: true }, label: 'Disabled' }
      ]
    });
  }

  return examples;
}

function generateMoleculeExamples(properties) {
  return [
    {
      name: 'Interactive Example',
      description: 'Component with interactive features',
      variants: [
        { props: { title: 'Sample Title', content: 'Sample content' }, label: 'With Content' },
        { props: { title: 'Empty State' }, label: 'Empty' }
      ]
    }
  ];
}

function generateOrganismExamples(properties) {
  return [
    {
      name: 'Complex Example',
      description: 'Component with complex data',
      variants: [
        { 
          props: { 
            data: JSON.stringify([
              { id: 1, name: 'Item 1', value: 'Value 1' },
              { id: 2, name: 'Item 2', value: 'Value 2' },
              { id: 3, name: 'Item 3', value: 'Value 3' }
            ])
          }, 
          label: 'With Data' 
        }
      ]
    }
  ];
}