# NeoForge Production Deployment Configuration
# Complete production-ready deployment with all security and monitoring features

---
# Production Namespace with Security Labels
apiVersion: v1
kind: Namespace
metadata:
  name: neoforge
  labels:
    app.kubernetes.io/name: neoforge
    app.kubernetes.io/instance: neoforge-production
    app.kubernetes.io/component: namespace
    app.kubernetes.io/part-of: neoforge
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/enforce-version: v1beta1
  annotations:
    description: "NeoForge production namespace with restricted security policy"

---
# Production Service Account with Minimal Permissions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: neoforge-api
  namespace: neoforge
  labels:
    app.kubernetes.io/name: neoforge-api-sa
    app.kubernetes.io/instance: neoforge-production
    app.kubernetes.io/component: service-account
    app.kubernetes.io/part-of: neoforge
automountServiceAccountToken: false
annotations:
  description: "Service account with minimal permissions for NeoForge API"

---
# Role with Production-Ready Permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: neoforge-api-role
  namespace: neoforge
  labels:
    app.kubernetes.io/name: neoforge-api-role
    app.kubernetes.io/instance: neoforge-production
    app.kubernetes.io/component: rbac
    app.kubernetes.io/part-of: neoforge
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch"]

---
# RoleBinding for Service Account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: neoforge-api-binding
  namespace: neoforge
  labels:
    app.kubernetes.io/name: neoforge-api-binding
    app.kubernetes.io/instance: neoforge-production
    app.kubernetes.io/component: rbac
    app.kubernetes.io/part-of: neoforge
subjects:
- kind: ServiceAccount
  name: neoforge-api
  namespace: neoforge
roleRef:
  kind: Role
  name: neoforge-api-role
  apiGroup: rbac.authorization.k8s.io

---
# Production API Deployment with Enhanced Security
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: neoforge
  labels:
    app: api
    component: backend
    version: "1.0"
    environment: production
    app.kubernetes.io/name: neoforge-api
    app.kubernetes.io/instance: neoforge-production
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: neoforge
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "NeoForge FastAPI backend service - Production"
    kubectl.kubernetes.io/default-container: api
    kubectl.kubernetes.io/default-logs-container: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: api
      component: backend
  template:
    metadata:
      labels:
        app: api
        component: backend
        version: "1.0"
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
        checksum/config: "abc123"
        checksum/secret: "def456"
    spec:
      serviceAccountName: neoforge-api
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      initContainers:
      # Database migration init container
      - name: db-migrate
        image: neoforge/backend:latest
        imagePullPolicy: Always
        command:
        - /bin/bash
        - -c
        - |
          echo "Running database migrations..."
          alembic upgrade head
          echo "Database migrations completed"
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secret
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache

      containers:
      - name: api
        image: neoforge/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: METRICS_ENABLED
          value: "true"
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume
          mountPath: /app/logs

      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}

      nodeSelector:
        workload: api
        environment: production
      tolerations:
      - key: "workload"
        operator: "Equal"
        value: "api"
        effect: "NoSchedule"
      - key: "environment"
        operator: "Equal"
        value: "production"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: workload
                operator: In
                values:
                - api
          - weight: 50
            preference:
              matchExpressions:
              - key: environment
                operator: In
                values:
                - production
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - api
              topologyKey: kubernetes.io/hostname

      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# Production Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: neoforge
  labels:
    app: frontend
    component: web
    version: "1.0"
    environment: production
    app.kubernetes.io/name: neoforge-frontend
    app.kubernetes.io/instance: neoforge-production
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: neoforge
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "NeoForge frontend service - Production"
    kubectl.kubernetes.io/default-container: frontend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: frontend
      component: web
  template:
    metadata:
      labels:
        app: frontend
        component: web
        version: "1.0"
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: neoforge-api
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      containers:
      - name: frontend
        image: neoforge/frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: API_URL
          value: "https://api.neoforge.dev"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run

      volumes:
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}

      nodeSelector:
        workload: web
        environment: production
      tolerations:
      - key: "workload"
        operator: "Equal"
        value: "web"
        effect: "NoSchedule"
      - key: "environment"
        operator: "Equal"
        value: "production"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: workload
                operator: In
                values:
                - web
          - weight: 50
            preference:
              matchExpressions:
              - key: environment
                operator: In
                values:
                - production

      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# Production ConfigMap with Security Headers
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: neoforge
  labels:
    app.kubernetes.io/name: app-config
    app.kubernetes.io/instance: neoforge-production
    app.kubernetes.io/component: config
    app.kubernetes.io/part-of: neoforge
data:
  # Application Configuration
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  DEBUG: "false"
  METRICS_ENABLED: "true"
  SECURITY_HEADERS_ENABLED: "true"

  # Security Headers Configuration
  SECURITY_HEADERS: |
    {
      "X-Frame-Options": "DENY",
      "X-Content-Type-Options": "nosniff",
      "X-XSS-Protection": "1; mode=block",
      "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
      "Referrer-Policy": "strict-origin-when-cross-origin",
      "Content-Security-Policy": "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' https://api.neoforge.dev;",
      "Permissions-Policy": "camera=(), microphone=(), geolocation=()"
    }

  # Rate Limiting Configuration
  RATE_LIMITS: |
    {
      "general": {"requests": 100, "window": 60},
      "auth": {"requests": 5, "window": 300},
      "api": {"requests": 1000, "window": 3600}
    }

  # Cache Configuration
  CACHE_CONFIG: |
    {
      "redis_url": "redis://redis:6379/0",
      "default_ttl": 300,
      "max_memory": "512mb",
      "eviction_policy": "allkeys-lru"
    }

---
# Production Secrets Template
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: neoforge
  labels:
    app.kubernetes.io/name: app-secret
    app.kubernetes.io/instance: neoforge-production
    app.kubernetes.io/component: secrets
    app.kubernetes.io/part-of: neoforge
type: Opaque
data:
  # Base64 encoded secrets - replace with actual values
  SECRET_KEY: "Y2hhbmdlLW1lLWluLXByb2R1Y3Rpb24="  # change-me-in-production
  JWT_SECRET_KEY: "Y2hhbmdlLW1lLWp3dC1zZWNyZXQ="  # change-me-jwt-secret
  DATABASE_URL: "cG9zdGdyZXNxbCtwc3ljb3BnMjpjaGFuZ2UtbWUtcGFzc3dvcmRAYmFja2VuZDp0ZXN0L2NoYW5nZS1tZS1kYg=="  # postgresql+psycopg2:change-me-password@backend:test/change-me-db
  REDIS_URL: "cmVkaXM6Ly86Y2hhbmdlLW1lLXJlZGlzLXBhc3NAcmVkaXM6NjM3OS8w"  # redis://:change-me-redis-pass@redis:6379/0
  POSTGRES_PASSWORD: "Y2hhbmdlLW1lLXBvc3RncmVzLXBhc3M="  # change-me-postgres-pass
  REDIS_PASSWORD: "Y2hhbmdlLW1lLXJlZGlzLXBhc3M="  # change-me-redis-pass
  SMTP_PASSWORD: "Y2hhbmdlLW1lLXNtdHA="  # change-me-smtp

---
# Production Ingress with SSL and Security
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: neoforge-ingress
  namespace: neoforge
  labels:
    app.kubernetes.io/name: neoforge-ingress
    app.kubernetes.io/instance: neoforge-production
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: neoforge
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-cert-manager: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.neoforge.dev"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
spec:
  tls:
  - hosts:
    - api.neoforge.dev
    - app.neoforge.dev
    secretName: neoforge-tls
  rules:
  - host: api.neoforge.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api
            port:
              number: 8000
  - host: app.neoforge.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80

---
# Horizontal Pod Autoscaler for API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-hpa
  namespace: neoforge
  labels:
    app.kubernetes.io/name: api-hpa
    app.kubernetes.io/instance: neoforge-production
    app.kubernetes.io/component: autoscaling
    app.kubernetes.io/part-of: neoforge
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests
      target:
        type: AverageValue
        averageValue: 1000
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
      minReplicas: 3

---
# Pod Disruption Budget for API
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-pdb
  namespace: neoforge
  labels:
    app.kubernetes.io/name: api-pdb
    app.kubernetes.io/instance: neoforge-production
    app.kubernetes.io/component: pdb
    app.kubernetes.io/part-of: neoforge
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: api
      component: backend

---
# Pod Disruption Budget for Frontend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: frontend-pdb
  namespace: neoforge
  labels:
    app.kubernetes.io/name: frontend-pdb
    app.kubernetes.io/instance: neoforge-production
    app.kubernetes.io/component: pdb
    app.kubernetes.io/part-of: neoforge
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: frontend
      component: web