apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: neoforge
  labels:
    app: frontend
    component: web
    version: "1.0"
    app.kubernetes.io/name: neoforge-frontend
    app.kubernetes.io/instance: neoforge-frontend
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: neoforge
  annotations:
    description: "NeoForge frontend static file server"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: frontend
      component: web
  template:
    metadata:
      labels:
        app: frontend
        component: web
        version: "1.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: neoforge-frontend
      securityContext:
        runAsUser: 101  # nginx user
        runAsGroup: 101
        runAsNonRoot: true
        fsGroup: 101
      
      containers:
      - name: frontend
        image: neoforge/frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        env:
        - name: NGINX_WORKER_PROCESSES
          value: "auto"
        - name: NGINX_WORKER_CONNECTIONS
          value: "1024"
        - name: NGINX_KEEPALIVE_TIMEOUT
          value: "65"
        - name: NGINX_CLIENT_MAX_BODY_SIZE
          value: "10m"
        - name: API_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: API_BASE_URL
        volumeMounts:
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        - name: tmp
          mountPath: /tmp
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: 80
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 2
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: 80
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 12
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE  # Allow binding to port 80
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 101
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -c
              - |
                echo "Gracefully shutting down nginx..."
                nginx -s quit
                sleep 10
      
      # Nginx Prometheus Exporter
      - name: nginx-exporter
        image: nginx/nginx-prometheus-exporter:0.11.0
        imagePullPolicy: IfNotPresent
        args:
        - -nginx.scrape-uri=http://localhost:80/nginx_status
        - -web.listen-address=:9113
        ports:
        - containerPort: 9113
          name: metrics
        resources:
          requests:
            memory: "16Mi"
            cpu: "10m"
          limits:
            memory: "32Mi"
            cpu: "50m"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
      
      volumes:
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: nginx-config
        configMap:
          name: frontend-config
          defaultMode: 0644
      
      # Node affinity and pod anti-affinity for HA
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values: ["n1-standard-1", "n1-standard-2"]
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["frontend"]
            topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["frontend"]
              topologyKey: topology.kubernetes.io/zone
      
      # Topology spread constraints
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: frontend
      - maxSkew: 2
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: frontend
      
      terminationGracePeriodSeconds: 15
      restartPolicy: Always
      dnsPolicy: ClusterFirst