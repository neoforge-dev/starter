apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: neoforge
  labels:
    app: postgres
    component: database
    version: "15"
spec:
  serviceName: postgres-headless
  replicas: 1 # Start with single instance, can be scaled to HA later
  selector:
    matchLabels:
      app: postgres
      component: database
  template:
    metadata:
      labels:
        app: postgres
        component: database
        version: "15"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      initContainers:
      - name: postgres-init
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          # Initialize PostgreSQL data directory if empty
          if [ ! -d /var/lib/postgresql/data/pgdata ]; then
            echo "Initializing PostgreSQL data directory..."
            mkdir -p /var/lib/postgresql/data/pgdata
            chown -R postgres:postgres /var/lib/postgresql/data
          fi
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        securityContext:
          runAsUser: 0  # Need root to chown
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=md5"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d/init.sql
          subPath: init-scripts.sql
        - name: backup-scripts
          mountPath: /usr/local/bin/backup.sh
          subPath: backup-script.sh
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U postgres -d neoforge
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U postgres -d neoforge
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U postgres -d neoforge
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false  # PostgreSQL needs to write to various locations
          runAsNonRoot: true
          runAsUser: 999

      # PostgreSQL Exporter for Prometheus monitoring
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.15.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://postgres:$(POSTGRES_PASSWORD)@localhost:5432/neoforge?sslmode=disable"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: PG_EXPORTER_QUERY_PATH
          value: "/etc/postgres_exporter/queries.yaml"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true

      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
          defaultMode: 0644
      - name: init-scripts
        configMap:
          name: postgres-config
          defaultMode: 0755
      - name: backup-scripts
        configMap:
          name: postgres-config
          defaultMode: 0755

      # Node affinity to prefer running on nodes with SSD storage
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values: ["n1-standard-4", "n1-highmem-2"] # Adjust for your cloud
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["postgres"]
              topologyKey: kubernetes.io/hostname

  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        app: postgres
        component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: neoforge-ssd
      resources:
        requests:
          storage: 50Gi
