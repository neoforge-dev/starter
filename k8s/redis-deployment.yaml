apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: neoforge
  labels:
    app: redis
    component: cache
    version: "7.2"
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: neoforge-redis
    app.kubernetes.io/version: "7.2"
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: neoforge
spec:
  serviceName: redis-headless
  replicas: 1
  selector:
    matchLabels:
      app: redis
      component: cache
  template:
    metadata:
      labels:
        app: redis
        component: cache
        version: "7.2"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      initContainers:
      - name: redis-init
        image: redis:7.2-alpine
        command:
        - sh
        - -c
        - |
          # Create data directory and set permissions
          mkdir -p /data
          chown -R 999:999 /data
          # Initialize Redis configuration if needed
          if [ ! -f /data/redis.conf ]; then
            cp /usr/local/etc/redis/redis.conf /data/redis.conf || true
          fi
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        securityContext:
          runAsUser: 0
      containers:
      - name: redis
        image: redis:7.2-alpine
        imagePullPolicy: IfNotPresent
        command:
        - redis-server
        args:
        - /etc/redis/redis.conf
        - --dir
        - /data
        - --appendonly
        - "yes"
        - --appendfsync
        - everysec
        - --maxmemory
        - 256mb
        - --maxmemory-policy
        - allkeys-lru
        - --tcp-keepalive
        - "300"
        - --timeout
        - "0"
        - --tcp-backlog
        - "511"
        - --databases
        - "16"
        - --save
        - "900 1"
        - --save
        - "300 10"
        - --save
        - "60 10000"
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PASSWORD
              optional: true
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 5
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999

      # Redis Exporter for Prometheus monitoring
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.56.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_ADDR
          value: "localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PASSWORD
              optional: true
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true

      volumes:
      - name: redis-config
        configMap:
          name: redis-config
          defaultMode: 0644

      # Node affinity for performance
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values: ["n1-standard-2", "n1-highmem-2"]
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["redis"]
              topologyKey: kubernetes.io/hostname

  volumeClaimTemplates:
  - metadata:
      name: redis-storage
      labels:
        app: redis
        component: cache
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: neoforge-ssd
      resources:
        requests:
          storage: 10Gi
