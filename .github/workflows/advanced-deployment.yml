name: Advanced Deployment Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      canary_percentage:
        description: 'Canary deployment percentage (0-100)'
        required: false
        default: '10'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

permissions:
  contents: read
  packages: write
  deployments: write
  security-events: write
  pull-requests: write
  checks: write
  statuses: write

jobs:
  # Detect changes and determine deployment strategy
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
      deployment_type: ${{ steps.deployment-type.outputs.type }}
      environment: ${{ steps.environment.outputs.env }}
      canary_percentage: ${{ steps.canary-percentage.outputs.percentage }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'requirements*.txt'
              - 'pyproject.toml'
            frontend:
              - 'frontend/**'
              - 'package*.json'
            infrastructure:
              - 'k8s/**'
              - 'deploy/**'
              - '.github/workflows/**'
              - 'docker-compose*.yml'
              - 'Dockerfile*'

      - name: Determine deployment type
        id: deployment-type
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "type=blue-green" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "type=canary" >> $GITHUB_OUTPUT
          else
            echo "type=rolling" >> $GITHUB_OUTPUT
          fi

      - name: Determine environment
        id: environment
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "env=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.environment }}" ]]; then
            echo "env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
          fi

      - name: Set canary percentage
        id: canary-percentage
        run: |
          percentage="${{ github.event.inputs.canary_percentage || '10' }}"
          if [[ "$percentage" -lt 0 || "$percentage" -gt 100 ]]; then
            echo "percentage=10" >> $GITHUB_OUTPUT
          else
            echo "percentage=$percentage" >> $GITHUB_OUTPUT
          fi

  # Security scanning and compliance checks
  security:
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [trivy, checkov, semgrep]
    steps:
      - uses: actions/checkout@v4

      - name: Run ${{ matrix.tool }} security scan
        uses: securecodewarrior/github-action-${{ matrix.tool }}@main
        with:
          args: |
            --format sarif \
            --output results-${{ matrix.tool }}.sarif \
            ${{ matrix.tool == 'trivy' && '--severity HIGH,CRITICAL' || '' }} \
            ${{ matrix.tool == 'checkov' && '--framework terraform,kubernetes' || '' }} \
            ${{ matrix.tool == 'semgrep' && '--config auto' || '' }}

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results-${{ matrix.tool }}.sarif
          category: ${{ matrix.tool }}-security-scan

  # Build and test backend
  backend:
    needs: [changes, security]
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install -r requirements.test.txt

      - name: Run backend tests with coverage
        run: |
          cd backend
          pytest --cov=app --cov-report=xml --cov-report=html --junitxml=junit.xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Build backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: neoforge/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Run container security scan
        uses: securecodewarrior/github-action-trivy@main
        with:
          image: neoforge/backend:${{ github.sha }}
          format: sarif
          output: backend-trivy-results.sarif

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: backend-trivy-results.sarif
          category: backend-container-scan

  # Build and test frontend
  frontend:
    needs: [changes, security]
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        working-directory: frontend
        run: bun install --frozen-lockfile

      - name: Run frontend tests
        working-directory: frontend
        run: bun run test:coverage

      - name: Build frontend
        working-directory: frontend
        run: bun run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
          configPath: .lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Build frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: neoforge/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Infrastructure validation
  infrastructure:
    needs: [changes]
    if: needs.changes.outputs.infrastructure == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kubernetes tools
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Validate Kubernetes manifests
        run: |
          find k8s -name "*.yaml" -exec kubectl apply --dry-run=client -f {} \;

      - name: Run kube-score validation
        uses: zegl/kube-score-action@v1
        with:
          files: k8s/*.yaml
          output: markdown

      - name: Run checkov on Kubernetes manifests
        uses: bridgecrewio/checkov-action@v12
        with:
          framework: kubernetes
          file: k8s/
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif
          category: k8s-security-scan

  # Deploy to environment
  deploy:
    needs: [changes, backend, frontend, infrastructure]
    if: (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true') && !failure()
    runs-on: ubuntu-latest
    environment: ${{ needs.changes.outputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        if: needs.changes.outputs.backend == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        if: needs.changes.outputs.frontend == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Kubernetes
        run: |
          export IMAGE_TAG=${{ github.sha }}
          export ENVIRONMENT=${{ needs.changes.outputs.environment }}
          export DEPLOYMENT_TYPE=${{ needs.changes.outputs.deployment_type }}
          export CANARY_PERCENTAGE=${{ needs.changes.outputs.canary_percentage }}

          ./k8s/scripts/deploy.sh deploy

      - name: Wait for deployment
        run: |
          ./k8s/scripts/deploy.sh status

      - name: Run post-deployment tests
        run: |
          # Run smoke tests
          curl -f https://api.${{ needs.changes.outputs.environment }}.neoforge.dev/health

          # Run integration tests
          bun run test:integration

      - name: Create deployment notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Performance and load testing
  performance:
    needs: [deploy]
    if: needs.changes.outputs.environment == 'production'
    runs-on: ubuntu-latest
    steps:
      - name: Run load tests
        uses: k6io/action@v2
        with:
          filename: k6-load-test.js
          flags: --out json=results.json
          cloud: true
          token: ${{ secrets.K6_CLOUD_TOKEN }}

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: k6-results
          path: results.json

      - name: Generate performance report
        run: |
          # Generate performance report from load test results
          echo "Performance test completed"

  # Rollback on failure
  rollback:
    needs: [deploy, performance]
    if: failure() && needs.changes.outputs.environment == 'production'
    runs-on: ubuntu-latest
    steps:
      - name: Rollback deployment
        run: |
          ./k8s/scripts/deploy.sh rollback

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Post-deployment monitoring
  monitoring:
    needs: [deploy]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Setup monitoring
        run: |
          # Setup monitoring dashboards
          kubectl apply -f k8s/advanced-monitoring.yaml

          # Setup canary monitoring if needed
          if [[ "${{ needs.changes.outputs.deployment_type }}" == "canary" ]]; then
            kubectl apply -f k8s/canary-deployment.yaml
          fi

      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.changes.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Type**: ${{ needs.changes.outputs.deployment_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Canary Percentage**: ${{ needs.changes.outputs.canary_percentage }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Changes**: ${{ needs.changes.outputs.backend }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Changes**: ${{ needs.changes.outputs.frontend }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Infrastructure Changes**: ${{ needs.changes.outputs.infrastructure }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Scans" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Trivy container scanning" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Checkov infrastructure scanning" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Semgrep code analysis" >> $GITHUB_STEP_SUMMARY