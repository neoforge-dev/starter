name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  unit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        bun-version: [latest]
        shard: [1, 2, 3] # Split unit tests into 3 shards

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ matrix.bun-version }}

      - name: Install Dependencies
        working-directory: frontend
        run: bun install --frozen-lockfile

      - name: Run Unit Tests
        working-directory: frontend
        run: bun run test -- --shard=${{ matrix.shard }}/3

      - name: Upload Coverage
        if: matrix.shard == 1
        uses: codecov/codecov-action@v4
        with:
          directory: frontend/coverage/
          flags: frontend-unit
          name: frontend-unit-coverage

  visual:
    runs-on: ubuntu-latest
    needs: unit

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Dependencies
        working-directory: frontend
        run: bun install --frozen-lockfile

      - name: Install Playwright
        working-directory: frontend
        run: bunx playwright install --with-deps

      - name: Run Visual Tests
        working-directory: frontend
        run: bun run test:visual

      - name: Upload Visual Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-results
          path: frontend/playwright-report/

  a11y:
    runs-on: ubuntu-latest
    needs: unit

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Dependencies
        working-directory: frontend
        run: bun install --frozen-lockfile

      - name: Install Playwright
        working-directory: frontend
        run: bunx playwright install --with-deps

      - name: Run A11y Tests
        working-directory: frontend
        run: bun run test:a11y

      - name: Upload A11y Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: a11y-test-results
          path: frontend/playwright-report/

  performance:
    runs-on: ubuntu-latest
    needs: unit

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Dependencies
        working-directory: frontend
        run: bun install --frozen-lockfile

      - name: Run Performance Tests
        working-directory: frontend
        run: |
          # Warm up the environment with Bun runtime
          bun --version
          bun run test:perf

      - name: Upload Performance Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: frontend/test-results/

  report:
    needs: [unit, visual, a11y, performance]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate Combined Report
        run: |
          echo "# Test Results" > report.md
          echo "## Unit Tests" >> report.md
          cat artifacts/test-results/summary.txt >> report.md || echo "No unit test results" >> report.md
          echo "## Visual Tests" >> report.md
          cat artifacts/visual-test-results/summary.txt >> report.md || echo "No visual test results" >> report.md
          echo "## A11y Tests" >> report.md
          cat artifacts/a11y-test-results/summary.txt >> report.md || echo "No a11y test results" >> report.md
          echo "## Performance Tests" >> report.md
          cat artifacts/performance-results/summary.txt >> report.md || echo "No performance test results" >> report.md

      - name: Upload Combined Report
        uses: actions/upload-artifact@v4
        with:
          name: combined-test-report
          path: report.md

  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: neoforge
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install backend deps
        working-directory: backend
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
      - name: Run backend tests and smoke
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/neoforge
          REDIS_URL: redis://localhost:6379/1
          ENVIRONMENT: test
        run: |
          make setup
          make test
          make smoke
