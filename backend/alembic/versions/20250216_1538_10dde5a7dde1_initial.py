"""initial_schema

Revision ID: 10dde5a7dde1
Revises:
Create Date: 2025-02-16 15:38:14.130381

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "10dde5a7dde1"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("email", sa.VARCHAR(), nullable=False),
        sa.Column("full_name", sa.VARCHAR(), nullable=False),
        sa.Column("hashed_password", sa.VARCHAR(), nullable=False),
        sa.Column("is_active", sa.BOOLEAN(), nullable=False),
        sa.Column("is_superuser", sa.BOOLEAN(), nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name="pk_users"),
    )
    op.create_index("ix_users_email", "users", ["email"], unique=True)

    op.create_table(
        "admin_permissions",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "role",
            postgresql.ENUM(
                "SUPER_ADMIN",
                "CONTENT_ADMIN",
                "USER_ADMIN",
                "READONLY_ADMIN",
                name="adminrole",
            ),
            nullable=False,
        ),
        sa.Column("resource", sa.VARCHAR(), nullable=False),
        sa.Column("can_create", sa.BOOLEAN(), nullable=True),
        sa.Column("can_read", sa.BOOLEAN(), nullable=True),
        sa.Column("can_update", sa.BOOLEAN(), nullable=True),
        sa.Column("can_delete", sa.BOOLEAN(), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), nullable=False),
        sa.PrimaryKeyConstraint("id", name="pk_admin_permissions"),
    )
    op.create_index(
        "ix_admin_permissions_id", "admin_permissions", ["id"], unique=False
    )

    op.create_table(
        "admins",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), nullable=False),
        sa.Column(
            "role",
            postgresql.ENUM(
                "SUPER_ADMIN",
                "CONTENT_ADMIN",
                "USER_ADMIN",
                "READONLY_ADMIN",
                name="adminrole",
            ),
            nullable=False,
        ),
        sa.Column("is_active", sa.BOOLEAN(), nullable=True),
        sa.Column("last_login", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="fk_admins_user_id_users"
        ),
        sa.PrimaryKeyConstraint("id", name="pk_admins"),
        sa.UniqueConstraint("user_id", name="uq_admins_user_id"),
    )
    op.create_index("ix_admins_id", "admins", ["id"], unique=False)

    op.create_table(
        "items",
        sa.Column("title", sa.VARCHAR(), nullable=False),
        sa.Column("description", sa.VARCHAR(), nullable=True),
        sa.Column("owner_id", sa.INTEGER(), nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["users.id"],
            name="fk_items_owner_id_users",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_items"),
    )
    op.create_index("ix_items_owner_id", "items", ["owner_id"], unique=False)
    op.create_index("ix_items_title", "items", ["title"], unique=False)

    op.create_table(
        "email_tracking",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("email_id", sa.VARCHAR(), nullable=True),
        sa.Column("recipient", sa.VARCHAR(), nullable=False),
        sa.Column("subject", sa.VARCHAR(), nullable=False),
        sa.Column("template_name", sa.VARCHAR(), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "QUEUED",
                "SENT",
                "DELIVERED",
                "OPENED",
                "CLICKED",
                "BOUNCED",
                "FAILED",
                "SPAM",
                name="emailstatus",
            ),
            nullable=False,
        ),
        sa.Column("sent_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("delivered_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("opened_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("clicked_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("failed_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("error_message", sa.VARCHAR(), nullable=True),
        sa.Column(
            "tracking_metadata", postgresql.JSON(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name="pk_email_tracking"),
    )
    op.create_index(
        "ix_email_tracking_recipient", "email_tracking", ["recipient"], unique=False
    )
    op.create_index("ix_email_tracking_id", "email_tracking", ["id"], unique=False)
    op.create_index(
        "ix_email_tracking_email_id", "email_tracking", ["email_id"], unique=True
    )

    op.create_table(
        "email_events",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("email_id", sa.INTEGER(), nullable=False),
        sa.Column(
            "event_type",
            postgresql.ENUM(
                "QUEUED",
                "SENT",
                "DELIVERED",
                "OPENED",
                "CLICKED",
                "BOUNCED",
                "FAILED",
                "SPAM",
                name="emailstatus",
            ),
            nullable=False,
        ),
        sa.Column("occurred_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("user_agent", sa.VARCHAR(), nullable=True),
        sa.Column("ip_address", sa.VARCHAR(), nullable=True),
        sa.Column("location", sa.VARCHAR(), nullable=True),
        sa.Column(
            "event_metadata", postgresql.JSON(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["email_id"],
            ["email_tracking.id"],
            name="fk_email_events_email_id_email_tracking",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_email_events"),
    )
    op.create_index("ix_email_events_id", "email_events", ["id"], unique=False)

    op.create_table(
        "admin_audit_logs",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("admin_id", sa.INTEGER(), nullable=False),
        sa.Column("action", sa.VARCHAR(), nullable=False),
        sa.Column("resource", sa.VARCHAR(), nullable=False),
        sa.Column("resource_id", sa.VARCHAR(), nullable=True),
        sa.Column("details", sa.VARCHAR(), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), nullable=False),
        sa.ForeignKeyConstraint(
            ["admin_id"], ["admins.id"], name="fk_admin_audit_logs_admin_id_admins"
        ),
        sa.PrimaryKeyConstraint("id", name="pk_admin_audit_logs"),
    )
    op.create_index("ix_admin_audit_logs_id", "admin_audit_logs", ["id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_admin_audit_logs_id", table_name="admin_audit_logs")
    op.drop_table("admin_audit_logs")
    op.drop_index("ix_email_events_id", table_name="email_events")
    op.drop_table("email_events")
    op.drop_index("ix_email_tracking_recipient", table_name="email_tracking")
    op.drop_index("ix_email_tracking_id", table_name="email_tracking")
    op.drop_index("ix_email_tracking_email_id", table_name="email_tracking")
    op.drop_table("email_tracking")
    op.drop_index("ix_items_owner_id", table_name="items")
    op.drop_index("ix_items_title", table_name="items")
    op.drop_table("items")
    op.drop_index("ix_admins_id", table_name="admins")
    op.drop_table("admins")
    op.drop_index("ix_admin_permissions_id", table_name="admin_permissions")
    op.drop_table("admin_permissions")
    op.drop_index("ix_users_email", table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
