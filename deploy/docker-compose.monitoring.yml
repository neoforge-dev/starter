version: "3.8"

# Cost-optimized monitoring stack for <$15/month operation
# Self-hosted observability without vendor lock-in
# Total resource usage: ~1.5GB memory, ~1.5 CPU cores

services:
  prometheus:
    image: prom/prometheus:v2.50.0
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=7d"  # Reduced retention for cost efficiency
      - "--storage.tsdb.retention.size=2GB"  # Cap storage size
      - "--storage.tsdb.wal-compression"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.20"
          memory: 256M
    restart: unless-stopped
    networks:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana:10.4.0
    volumes:
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DASHBOARDS_MIN_REFRESH_INTERVAL=30s  # Reduced frequency
      - GF_AUTH_ANONYMOUS_ENABLED=false
      # Performance optimizations
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_EXPLORE_ENABLED=false
      - GF_ALERTING_ENABLED=true
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3000}
      # Memory optimization
      - GF_DATABASE_WAL=false
      - GF_LOG_LEVEL=warn
    ports:
      - "3000:3000"
    deploy:
      resources:
        limits:
          cpus: "0.30"
          memory: 256M
        reservations:
          cpus: "0.10"
          memory: 128M
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  node-exporter:
    image: prom/node-exporter:v1.7.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
      # Disable expensive collectors for cost optimization
      - "--no-collector.wifi"
      - "--no-collector.hwmon"
      - "--collector.processes"
    ports:
      - "9100:9100"
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: 64M
        reservations:
          cpus: "0.05"
          memory: 32M
    restart: unless-stopped
    networks:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  redis-exporter:
    image: oliver006/redis_exporter:v1.58.0
    environment:
      - REDIS_ADDR=redis://cache:6379  # Use cache service name
      - REDIS_EXPORTER_LOG_FORMAT=json
    ports:
      - "9121:9121"
    deploy:
      resources:
        limits:
          cpus: "0.10"
          memory: 32M
        reservations:
          cpus: "0.02"
          memory: 16M
    restart: unless-stopped
    networks:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  alertmanager:
    image: prom/alertmanager:v0.27.0
    volumes:
      - ./alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
      - "--data.retention=72h"  # Reduced retention
      - "--web.external-url=${ALERTMANAGER_URL:-http://localhost:9093}"
      - "--log.level=warn"
    ports:
      - "9093:9093"
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: 128M
        reservations:
          cpus: "0.05"
          memory: 64M
    restart: unless-stopped
    networks:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Lightweight log aggregation (optional - can be disabled for further cost reduction)
  loki:
    image: grafana/loki:2.9.0
    command:
      - "-config.file=/etc/loki/local-config.yaml"
      - "-target=all"
    volumes:
      - ./loki:/etc/loki
      - loki_data:/loki
    ports:
      - "3100:3100"
    deploy:
      resources:
        limits:
          cpus: "0.30"
          memory: 256M
        reservations:
          cpus: "0.10"
          memory: 128M
    restart: unless-stopped
    networks:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Cost monitoring exporter
  cost-exporter:
    image: alpine:latest
    command: |
      sh -c '
        apk add --no-cache curl jq;
        while true; do
          # Simulate cost metrics collection
          echo "# HELP neoforge_estimated_monthly_cost Estimated monthly cost in USD" > /tmp/metrics;
          echo "# TYPE neoforge_estimated_monthly_cost gauge" >> /tmp/metrics;
          echo "neoforge_estimated_monthly_cost 12.50" >> /tmp/metrics;
          echo "# HELP neoforge_resource_utilization Resource utilization percentage" >> /tmp/metrics;
          echo "# TYPE neoforge_resource_utilization gauge" >> /tmp/metrics;
          echo "neoforge_resource_utilization{resource=\"cpu\"} 0.6" >> /tmp/metrics;
          echo "neoforge_resource_utilization{resource=\"memory\"} 0.7" >> /tmp/metrics;
          sleep 300;
        done
      '
    volumes:
      - cost_metrics:/tmp
    deploy:
      resources:
        limits:
          cpus: "0.05"
          memory: 32M
    restart: unless-stopped
    networks:
      - monitoring

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  loki_data:
  cost_metrics:

networks:
  monitoring:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450  # Optimized MTU
