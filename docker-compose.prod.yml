version: "3.8"

services:
  frontend:
    build:
      context: ./frontend
      target: production
      cache_from:
        - oven/bun:1.0-alpine
        - nginx:alpine
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://api:8000
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: "0.30"
          memory: 256M
        reservations:
          cpus: "0.10"
          memory: 128M
      replicas: 1
      restart_policy:
        condition: unless-stopped
        delay: 5s
        max_attempts: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api:
    build:
      context: ./backend
      target: production
      cache_from:
        - python:3.11-slim-bookworm
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/neoforge
      - REDIS_URL=redis://cache:6379/0
      - WORKERS=1
      - MAX_WORKERS=2
      - WEB_CONCURRENCY=1
    depends_on:
      - db
      - cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: "0.80"
          memory: 768M
        reservations:
          cpus: "0.30"
          memory: 384M
      replicas: 1
      restart_policy:
        condition: unless-stopped
        delay: 10s
        max_attempts: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=neoforge
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      # Performance tuning for small deployments
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.20"
          memory: 256M
      replicas: 1
      restart_policy:
        condition: unless-stopped
        delay: 5s
        max_attempts: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  cache:
    image: redis:alpine
    ports:
      - "6379:6379"
    environment:
      # Memory optimization for small deployments
      - REDIS_MAXMEMORY=200mb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
      - REDIS_SAVE="900 1 300 10 60 1000"
    volumes:
      - redis_data:/data
      - ./deploy/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.30"
          memory: 256M
        reservations:
          cpus: "0.10"
          memory: 128M
      replicas: 1
      restart_policy:
        condition: unless-stopped
        delay: 5s
        max_attempts: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
  redis_data:
