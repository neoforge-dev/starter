# Contributing to NeoForge

First off, thanks for taking the time to contribute! ðŸŽ‰

NeoForge is built for bootstrapped founders, by the community. We focus on modern, cost-effective solutions that help founders move fast while maintaining quality.

## Quick Links

- [Issue Tracker](https://github.com/neoforge-dev/starter/issues)
- [Documentation](https://neoforge.dev/docs)
- [Discord Community](https://discord.gg/neoforge)

## Development Setup

### Prerequisites

- Python 3.12+
- Node.js 20+
- Docker
- uv and ruff installed

### Getting Started

```bash
# Clone the repository
git clone https://github.com/neoforge-dev/starter
cd starter

# Install Python dependencies using uv
curl -LsSf https://astral.sh/uv/install.sh | sh
uv venv
uv pip install -r requirements.txt

# Install frontend dependencies
cd frontend
npm install

# Start development environment
make dev
```

## Development Workflow

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes using conventional commits
4. Push to your fork
5. Open a Pull Request

### Commit Messages

We use [Conventional Commits](https://www.conventionalcommits.org/). Examples:

```bash
feat: add user authentication component
fix: resolve memory leak in cache service
docs: update deployment guide
chore: update dependencies
```

### Code Style

#### Backend (Python)
- Use UV for dependency management
- Format code with Ruff
- Type hints are mandatory
- Follow FastAPI best practices

```python
# Good
async def get_user(user_id: int) -> User:
    return await db.get(User, user_id)

# Bad
def get_user(id):
    return db.get(User, id)
```

#### Frontend (TypeScript)
- Use ESLint and Prettier
- Write web components using Lit
- Keep components small and focused
- Use browser-native features when possible

```typescript
// Good
@customElement('user-card')
export class UserCard extends LitElement {
    @property() user!: User;

    render() {
        return html`
            <div class="card">
                <h2>${this.user.name}</h2>
            </div>
        `;
    }
}

// Bad
@customElement('user-card')
export class UserCard extends LitElement {
    // Missing type information
    @property() user;
}
```

### Testing

- Write tests for new features
- Update tests for bug fixes
- Aim for good coverage
- Include edge cases

```bash
# Backend tests
pytest

# Frontend tests
npm test
```

## Pull Request Process

1. Update documentation for new features
2. Add tests for new functionality
3. Ensure all tests pass
4. Update CHANGELOG.md if needed
5. Get review from maintainers

## What We're Looking For

### High Priority
- Performance improvements
- Security enhancements
- Cost optimization features
- Developer experience improvements
- Documentation improvements

### Also Welcome
- Bug fixes
- New components
- Testing improvements
- Deployment guides

### Not Accepted
- Breaking changes without discussion
- Features that increase hosting costs
- Heavy framework integrations
- Non-standard web approaches

## First Time Contributors

Look for issues labeled with:
- `good first issue`
- `help wanted`
- `documentation`

## Community

- Be kind and respectful
- Help others when you can
- Follow our [Code of Conduct](CODE_OF_CONDUCT.md)
- Join our [Discord](https://discord.gg/neoforge)

## Questions?

Feel free to:
- Open an issue for questions
- Ask in our Discord
- Tag @neoforge-dev in discussions

Thank you for contributing to NeoForge! ðŸš€
